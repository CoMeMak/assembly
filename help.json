const HELP = {

    "moveTo": "Moves the robot to the current pose, as reflected by the position and rotation parameters in the robot control area ðŸ¡•. This actor uses the following parameters: <ul class='help_ul'><li><b>Robot.tcp.[x, y, z]</b> â†’ Tool center point (TCP) coordinates in Carthesian space</li><li><b>Robot.tcp.[rx, ry, rz]</b> â†’ TCP rotation around the respective (Euler angles)</li><li><b>Params.motion.[acceleration, velocity]</b> â†’ Movement acceleration and velocity</li></ul>",
    
    "moveRelative": "Moves the robot from its current pose by the amount specified by the Params.motion.[dP, dR] parameters. This actor uses the following parameters: <ul class='help_ul'><li><b>Params.motion.dP.[x, y, z]</b> â†’ Translates the TCP by the amount specified wrt. the current position</li><li><b>Params.motion.dR.[rx, ry, rz]</b> â†’ Rotates TCP by the amount specified with respect to the current orientation</li></ul>",
    
    "gripperOpen": "Opens the gripper to its maximum width. This actor does not use any parameters.",
    
    "gripperClose": "Closes the gripper while applying force in order to grasp objects.  This actor does not use any parameters.",
    
    "gripperAction": "Sets the gripper fingers to the specified width. This actor uses the following parameter: <ul class='help_ul'><li><b>Params.motion.width</b> â†’ The distance between the gripper fingers</li></ul>",
    
    "if": "Conditional structure. If the specified condition is true, the code enclosed between the 'if' actor and the first yellow terminator <img src='img/endif.png' height='15'> or another 'elseif' or 'else' actor is executed. Example: <p  class='help_p' align='center'><img src='img/if-example.png' height='25'></p> This actor uses the following parameter: <ul class='help_ul'><li><b>Vars.[boolean expression]</b> â†’ A variable containing an expression which evaluates to a boolean result (i.e., true or false). This parameter must be selected from the drop down list of the if actor. Expressions can be specified as strings within which fully qualified names of parameters and other variables can be used (e.g. 'Robot.tcp.x == 0' or 'Params.motion.velocity == 0.2' or 'Vars.count == 3', etc.).</li></ul>",
    
    "else": "Use this actor in combination with an 'if' actor to specify an alternative conditional branch for the case that the condition defined for the 'if' actor evaluates to false. In that case, the code enclosed between the 'else' actor and the first yellow terminator <img src='img/endif.png' height='15'> is executed. Example: <p  class='help_p' align='center'><img src='img/else-example.png' height='25'></p> This actor does not use any parameters.",
    
    "elseif": "This actor can be used in combination with an 'if' actor to specify an additional conditional branch. If the specified condition is true, the code enclosed between the 'elseif' actor and the first yellow terminator <img src='img/endif.png' height='15'> or another 'elseif' or 'else' actor is executed. Example: <p class='help_p' align='center'><img src='img/else-example.png' height='25'></p> This actor uses the following parameter: <ul class='help_ul'><li><b>Vars.[boolean expression]</b> â†’ A variable containing an expression which evaluates to a boolean result (i.e., true or false). This parameter must be selected from the drop down list of the if actor. Expressions can be specified as strings within which fully qualified names of parameters and other variables can be used (e.g. 'Robot.tcp.x == 0' or 'Params.motion.velocity == 0.2' or 'Vars.count == 3', etc.).</li></ul>",
    
    "while": "Loops through all the actors contained within the 'while' actors and the blue terminator <img src='img/endwhile.png' height='15'> as long as the specified condition is true. Example: <p  class='help_p' align='center'><img src='img/while-example.png' height='25'></p> This actor uses the following parameter: <ul class='help_ul'><li><b>Vars.[boolean expression]</b> â†’ A variable containing an expression which evaluates to a boolean result (i.e., true or false). This parameter must be selected from the drop down list of the if actor. Expressions can be specified as strings within which fully qualified names of parameters and other variables can be used (e.g. 'Robot.tcp.x == 0' or 'Params.motion.velocity == 0.2' or 'Vars.count == 3', etc.).</li></ul>",
    
    "repeat": "Loops through all the actors contained within the 'while' actors and the orange terminator <img src='img/endrepeat.png' height='15'> for the number of time specified by a count variable. Example: <p  class='help_p' align='center'><img src='img/repeat-example.png' height='25'></p> This actor uses the following parameter: <ul class='help_ul'><li><b>Vars.[integer number]</b> â†’ An integer number specified the number of times the loop should be executed.</li></ul>",
    
    "break": "Breaks out (i.e., stops the execution) of a 'repeat' or 'while' loop in an exceptional case. Example: <p  class='help_p' align='center'><img src='img/break-example.png' height='25'></p> This actor does not use any parameters.",
    
    "setParams": "This actor captures a snapshot of the current global 'Params' object (i.e., robot parameters). Upon execution, it will set the values of the parameters contained in that object to the values of the parameters captured in the snapshot. First set the value of one or more parameters in the 'Params' object ðŸ¡“ and then drag and drop this actor into the workflow ðŸ¡‘ to capture a snapshot of the 'Params' object.",
    
    "setVars": "This actor captures a snapshot of the current global 'Vars' object (i.e., user defined variables). Upon execution, it sets the values of the variables contained in that object to the values of the variables captured in the snapshot. First create new variables or set the value of one or more variables in the 'Vars' object ðŸ¡“ and then drag and drop this actor into the workflow ðŸ¡‘ to capture a snapshot of the 'Vars' object. ",

    "eval": "Executes (i.e., evaluates) the JavaScript expression specified in the string variable selected in the actor's drop-down list. This actor provides a flexible way of programming functionality that cannot be implemented using the actors currently provided in the library. This actor uses the following parameter: <ul class='help_ul'><li><b>Vars.[string expression]</b> â†’ A variable containing a JavaScript expression (e.g., 'alert(\"hello\");'</li></ul>",
}