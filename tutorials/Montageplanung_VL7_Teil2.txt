Das Diagramm bietet einen groben Überblick über verschiedene Möglichkeiten, einen Roboter zu programmieren. Ältere Roboterprogrammierumgebungen sowie die meisten offenen Programmierumgebungen bauen auf textbasierter Programmsemantik auf. Dies ist für Experten meistens die bevorzugte Art der Programmierung. Unter Programmsemantik (oder einfach Semantik) versteht man die Darstellung des logischen Aufbaus eines Programms. Programmiersprache und Programmsemantik bilden zusammen ein Programmiermodell. Im Gegensatz zur Ausführung eines Programms, die von der Computerarchitektur abhängig ist, kann seine Darstellung von einer Programmsemantik zu einer anderen unterschiedlich sein. Auch textbasierte Programmierumgebungen können auf unterschiedliche Semantiken aufbauen, wobei es immer eine gewisse Untermenge an gemeinsamen Elementen gibt, etwa Befehle, Funktionen, Zuweisungen, und so weiter. Größere semantische Unterschiede tauchen erst bei visuellen oder graphischen Programmierumgebungen auf. Im Falle der Roboterprogrammierung, sind die sogenannten Blockbasierten (oder Workflow) Programmiermodelle recht weit verbreitet. Diese werde wir uns später näher anschauen.

Aus dem Gesichtspunkt der Offenheit, unterscheidet man auch hier zwischen offene und proprietäre Programmierumgebungen. Wenn die Umgebung proprietär ist, dann ist meistens auch die Programmiersprache proprietär. Dies erfordert das Erlernen einer Programmiersprache zum Zweck der Programmierung von Robotern eines einzigen Herstellers. Obwohl dieses Modell durch offene Programmiersprachen ersetzt wird, werden von Roboterherstellern immer noch neue Roboterprogrammiersprachen erfunden, um das eigene Schulungsgeschäft auszubauen. Meistens wird dabei der Roboter an sich relativ günstig verkauft, in der Hoffnung, dass die Kunden dann auch Schulungen und Softwareerweiterungen dazukaufen. Der Preis eines Robotersystems wird deswegen oft direkt mit dem Kunden verhandelt.

Das Bild zeigt auch einige Roboter-Beispiele mit Bezug auf die unterschiedlichen Merkmale ihrer Programmierumgebungen.

Zwei Ausnahmen stellen RoboDK und ROS dar. 

RoboDK ist eine hybride Umgebung, die eine Mischung zwischen textueller und visueller Programmierung bietet. Ähnlich wie beim Universal Robots Polyscope (hier nicht dargestellt), sind RoboDK-Programme semantisch wie textuelle Programme aufgebaut, wobei jedes Programmelement per Maus-Click manipuliert werden kann. Dieses Programmiermodell entstammt dem Versuch, zwei Welten zu vereinen, mit dem Vorteil, dass man relativ Komplexe Programme erstellen kann, ohne die Syntax einer textuellen Programmierumgebung beherrschen zu müssen. Ein großer Nachteil dieses Programmiermodells ergibt sich aufgrund der langen Zeitdauer, die das Programmieren erfordert. Ähnlich wie ROS unterstützt auch RoboDK eine Vielzahl von Robotertypen unterschiedlicher Hersteller.

 
