1
00:00:00 --> 00:00:05
This video demonstrates how to generate an RPA model using an open source graphical robot programming environment called "Assembly."

2
00:00:07 --> 00:00:10
A robot program is being loaded and a few changes are made.

3
00:00:30 --> 00:00:35
The "if" block uses an expression variable called "expr". 

4
00:00:35 --> 00:00:43
"expr" references the X coordinate of the current robot pose.

5
00:00:50 --> 00:00:52
The program is started and run in this web-based simulator.

6
00:00:55 --> 00:01:03
After the "repeat" loop executes 5 times, the robot moves between two waypoints as long as "expr" evaluated in the "while" loop holds. 

7
00:01:08 --> 00:01:14
When clicking on the "clipboard" icon, the RPA model is generated and copied to the clipboard. 

8
00:01:20 --> 00:01:26
The user now switches to the RPA tool (Sikuli) and pastes the RPA model into an empty model file.

9
00:01:30 --> 00:01:35
The "import" command indicates which robot program generator to be used (URSIMe).

10
00:01:36 --> 00:01:41
URSIMe is implemented as a Python module written for Sikuli. The module conforms to the IRobotProgramGenerator interface. 

11
00:01:42 --> 00:01:47
The methods required by the IRobotProgramGenerator interface are implemented using RPA commands such as "click" and "type". 

11
00:01:48 --> 00:01:53
The "click" command is parameterized using images corresponding to different GUI elements in the robot's HMI.

12
00:01:54 --> 00:02:00
The user now calls up the robot's HMI which is remotely controlled using a tool like realVNC. 

13
00:02:00 --> 00:02:05
The user switches back to the RPA tool (Sikuli) and triggers the robot program generation.

14
00:02:06 --> 00:02:15
From this point on the mouse and keyboard are being controlled by the RPA script, not the user.

15
00:02:16 --> 00:02:20
A script is first created to replicated the variables used by the original robot program in the target environment (UR Polyscope).

16
00:02:21 --> 00:02:26
This script is generated by the "initContext" method and contains an "updateContext" function which is called before any variable is used by a conditional structure or a loop.

17
00:02:27 --> 00:02:31
The "initContext" script is saved in the robot's HMI file system using a randomly generated file name suffix.

18
00:02:40 --> 00:02:46
The speed of the generator is very slow for demonstration purposes. It can be significantly increased in a real application.

19
00:03:00 --> 00:03:05
Before the creation of the "if" loop, a script is generated, which calls the "updateContext" function defined before.

20
00:03:06 --> 00:03:12
The "if" loop uses the same expression as the original program; only the "Robot.tcp.x" variable was renamed to "Robot_tcp_x" to comply with URScript syntax.

21
00:04:40 --> 00:04:45
The program generation has finished. The user can now inspect and run the program in the target environment (UR Polyscope).
